
#ifndef FUNZIONALITA_COMPARATORI_H_
#define FUNZIONALITA_COMPARATORI_H_
#include <typeinfo>

static bool compareByCategoria(paziente_ref &a, paziente_ref &b) {
	return a->getCategoria() < b->getCategoria();
}

template <class T = std::less<decltype(*std::declval<It>())>>
static bool compareByID(T &a, T &b) {
	if((string)a->get_Type().compare("paziente_ref")){
		  Paziente* nuovo_a = static_cast<Paziente*>(a);
		  Paziente* nuovo_b = static_cast<Paziente*>(b);
		  return nuovo_a->getIdPaz() < nuovo_b->getIdPaz();
	} else if((string)a->get_Type().compare("dottore_ref")){
		  Dottore* nuovo_a = static_cast<Dottore*>(a);
		  Dottore* nuovo_b = static_cast<Dottore*>(b);
		  return nuovo_a->getIdDott() < nuovo_b->getIdDott();
	} else throw ("Tipo non corretto");
}

static bool compareBySpecializzazione(dottore_ref &a, dottore_ref &b) {
	return a->getSpecializzazione() < b->getSpecializzazione();
}
/*

static bool compareByID(paziente_ref &a, paziente_ref &b) {
	return a->getIdPaz() < b->getIdPaz();
}

static bool compareByID(dottore_ref &a, dottore_ref &b) {
	return a->getIdDott() < b->getIdDott();
}
*/


#endif /* FUNZIONALITA_COMPARATORI_H_ */
